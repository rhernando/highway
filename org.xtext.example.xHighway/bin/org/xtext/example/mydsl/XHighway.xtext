// automatically generated by Xtext
grammar org.xtext.example.mydsl.XHighway with org.eclipse.xtext.common.Terminals

import "platform:/resource/Highway/model/highway.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Highway returns Highway:
	{Highway}
	'Highway'
	'{'
		('initNodes' '{' initNodes+=Node ( "," initNodes+=Node)* '}' )?
		('initCars' '{' initCars+=Car ( "," initCars+=Car)* '}' )?
		('initSegments' '{' initSegments+=Segment ( "," initSegments+=Segment)* '}' )?
		('initSemaphore' '{' initSemaphore+=Semaphore ( "," initSemaphore+=Semaphore)* '}' )?
		('initSignal' '{' initSignal+=Signal ( "," initSignal+=Signal)* '}' )?
	'}';

Node returns Node:
	'Node'
	'{'
		'hasStarts' '(' hasStarts+=[Segment|EString] ( "," hasStarts+=[Segment|EString])* ')' 
		'hasEnds' '(' hasEnds+=[Segment|EString] ( "," hasEnds+=[Segment|EString])* ')' 
		('semaphore' semaphore=[Semaphore|EString])?
		('signals' '(' signals+=[Signal|EString] ( "," signals+=[Signal|EString])* ')' )?
	'}';

Car returns Car:
	{Car}
	'Car'
	'{'
		('timeIn' timeIn=EDate)?
		('timeOut' timeOut=EDate)?
	'}';

Segment returns Segment:
	{Segment}
	'Segment'
	'{'
		('numLanes' numLanes=EInt)?
		('length' length=EInt)?
		('hasCars' '(' hasCars+=[Car|EString] ( "," hasCars+=[Car|EString])* ')' )?
	'}';

Semaphore returns Semaphore:
	{Semaphore}
	(canGo?='canGo')?
	'Semaphore'
	'{'
		('secondsRed' secondsRed=EInt)?
		('secondsGreen' secondsGreen=EInt)?
	'}';

Signal returns Signal:
	{Signal}
	'Signal'
	;
	
EString returns ecore::EString:
	STRING | ID;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

	