/*
* generated by Xtext
*/
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.HighwayGrammarAccess;

public class HighwayParser extends AbstractContentAssistParser {
	
	@Inject
	private HighwayGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalHighwayParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalHighwayParser result = new org.xtext.ui.contentassist.antlr.internal.InternalHighwayParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getSignalAccess().getAlternatives(), "rule__Signal__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getHighwayAccess().getGroup(), "rule__Highway__Group__0");
					put(grammarAccess.getHighwayAccess().getGroup_3(), "rule__Highway__Group_3__0");
					put(grammarAccess.getHighwayAccess().getGroup_3_3(), "rule__Highway__Group_3_3__0");
					put(grammarAccess.getHighwayAccess().getGroup_4(), "rule__Highway__Group_4__0");
					put(grammarAccess.getHighwayAccess().getGroup_4_3(), "rule__Highway__Group_4_3__0");
					put(grammarAccess.getHighwayAccess().getGroup_5(), "rule__Highway__Group_5__0");
					put(grammarAccess.getHighwayAccess().getGroup_5_3(), "rule__Highway__Group_5_3__0");
					put(grammarAccess.getHighwayAccess().getGroup_6(), "rule__Highway__Group_6__0");
					put(grammarAccess.getHighwayAccess().getGroup_6_3(), "rule__Highway__Group_6_3__0");
					put(grammarAccess.getHighwayAccess().getGroup_7(), "rule__Highway__Group_7__0");
					put(grammarAccess.getHighwayAccess().getGroup_7_3(), "rule__Highway__Group_7_3__0");
					put(grammarAccess.getNode_ImplAccess().getGroup(), "rule__Node_Impl__Group__0");
					put(grammarAccess.getNode_ImplAccess().getGroup_7(), "rule__Node_Impl__Group_7__0");
					put(grammarAccess.getNode_ImplAccess().getGroup_12(), "rule__Node_Impl__Group_12__0");
					put(grammarAccess.getNode_ImplAccess().getGroup_14(), "rule__Node_Impl__Group_14__0");
					put(grammarAccess.getNode_ImplAccess().getGroup_15(), "rule__Node_Impl__Group_15__0");
					put(grammarAccess.getNode_ImplAccess().getGroup_15_3(), "rule__Node_Impl__Group_15_3__0");
					put(grammarAccess.getCarAccess().getGroup(), "rule__Car__Group__0");
					put(grammarAccess.getCarAccess().getGroup_4(), "rule__Car__Group_4__0");
					put(grammarAccess.getCarAccess().getGroup_5(), "rule__Car__Group_5__0");
					put(grammarAccess.getCarAccess().getGroup_6(), "rule__Car__Group_6__0");
					put(grammarAccess.getSegmentAccess().getGroup(), "rule__Segment__Group__0");
					put(grammarAccess.getSegmentAccess().getGroup_4(), "rule__Segment__Group_4__0");
					put(grammarAccess.getSegmentAccess().getGroup_5(), "rule__Segment__Group_5__0");
					put(grammarAccess.getSegmentAccess().getGroup_6(), "rule__Segment__Group_6__0");
					put(grammarAccess.getSegmentAccess().getGroup_6_3(), "rule__Segment__Group_6_3__0");
					put(grammarAccess.getSemaphoreAccess().getGroup(), "rule__Semaphore__Group__0");
					put(grammarAccess.getSemaphoreAccess().getGroup_4(), "rule__Semaphore__Group_4__0");
					put(grammarAccess.getSemaphoreAccess().getGroup_5(), "rule__Semaphore__Group_5__0");
					put(grammarAccess.getSemaphoreAccess().getGroup_6(), "rule__Semaphore__Group_6__0");
					put(grammarAccess.getSignal_ImplAccess().getGroup(), "rule__Signal_Impl__Group__0");
					put(grammarAccess.getExtractorAccess().getGroup(), "rule__Extractor__Group__0");
					put(grammarAccess.getExtractorAccess().getGroup_4(), "rule__Extractor__Group_4__0");
					put(grammarAccess.getExtractorAccess().getGroup_4_3(), "rule__Extractor__Group_4_3__0");
					put(grammarAccess.getExtractorAccess().getGroup_8(), "rule__Extractor__Group_8__0");
					put(grammarAccess.getExtractorAccess().getGroup_10(), "rule__Extractor__Group_10__0");
					put(grammarAccess.getExtractorAccess().getGroup_11(), "rule__Extractor__Group_11__0");
					put(grammarAccess.getExtractorAccess().getGroup_11_3(), "rule__Extractor__Group_11_3__0");
					put(grammarAccess.getInjectorAccess().getGroup(), "rule__Injector__Group__0");
					put(grammarAccess.getInjectorAccess().getGroup_4(), "rule__Injector__Group_4__0");
					put(grammarAccess.getInjectorAccess().getGroup_8(), "rule__Injector__Group_8__0");
					put(grammarAccess.getInjectorAccess().getGroup_10(), "rule__Injector__Group_10__0");
					put(grammarAccess.getInjectorAccess().getGroup_10_3(), "rule__Injector__Group_10_3__0");
					put(grammarAccess.getInjectorAccess().getGroup_11(), "rule__Injector__Group_11__0");
					put(grammarAccess.getInjectorAccess().getGroup_12(), "rule__Injector__Group_12__0");
					put(grammarAccess.getInjectorAccess().getGroup_12_3(), "rule__Injector__Group_12_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getSpeedlimitAccess().getGroup(), "rule__Speedlimit__Group__0");
					put(grammarAccess.getSpeedlimitAccess().getGroup_3(), "rule__Speedlimit__Group_3__0");
					put(grammarAccess.getStopAccess().getGroup(), "rule__Stop__Group__0");
					put(grammarAccess.getYieldAccess().getGroup(), "rule__Yield__Group__0");
					put(grammarAccess.getHighwayAccess().getInitSegmentsAssignment_3_2(), "rule__Highway__InitSegmentsAssignment_3_2");
					put(grammarAccess.getHighwayAccess().getInitSegmentsAssignment_3_3_1(), "rule__Highway__InitSegmentsAssignment_3_3_1");
					put(grammarAccess.getHighwayAccess().getInitNodesAssignment_4_2(), "rule__Highway__InitNodesAssignment_4_2");
					put(grammarAccess.getHighwayAccess().getInitNodesAssignment_4_3_1(), "rule__Highway__InitNodesAssignment_4_3_1");
					put(grammarAccess.getHighwayAccess().getInitCarsAssignment_5_2(), "rule__Highway__InitCarsAssignment_5_2");
					put(grammarAccess.getHighwayAccess().getInitCarsAssignment_5_3_1(), "rule__Highway__InitCarsAssignment_5_3_1");
					put(grammarAccess.getHighwayAccess().getInitSemaphoreAssignment_6_2(), "rule__Highway__InitSemaphoreAssignment_6_2");
					put(grammarAccess.getHighwayAccess().getInitSemaphoreAssignment_6_3_1(), "rule__Highway__InitSemaphoreAssignment_6_3_1");
					put(grammarAccess.getHighwayAccess().getInitSignalAssignment_7_2(), "rule__Highway__InitSignalAssignment_7_2");
					put(grammarAccess.getHighwayAccess().getInitSignalAssignment_7_3_1(), "rule__Highway__InitSignalAssignment_7_3_1");
					put(grammarAccess.getNode_ImplAccess().getNameAssignment_2(), "rule__Node_Impl__NameAssignment_2");
					put(grammarAccess.getNode_ImplAccess().getHasStartsAssignment_6(), "rule__Node_Impl__HasStartsAssignment_6");
					put(grammarAccess.getNode_ImplAccess().getHasStartsAssignment_7_1(), "rule__Node_Impl__HasStartsAssignment_7_1");
					put(grammarAccess.getNode_ImplAccess().getHasEndsAssignment_11(), "rule__Node_Impl__HasEndsAssignment_11");
					put(grammarAccess.getNode_ImplAccess().getHasEndsAssignment_12_1(), "rule__Node_Impl__HasEndsAssignment_12_1");
					put(grammarAccess.getNode_ImplAccess().getSemaphoreAssignment_14_1(), "rule__Node_Impl__SemaphoreAssignment_14_1");
					put(grammarAccess.getNode_ImplAccess().getSignalsAssignment_15_2(), "rule__Node_Impl__SignalsAssignment_15_2");
					put(grammarAccess.getNode_ImplAccess().getSignalsAssignment_15_3_1(), "rule__Node_Impl__SignalsAssignment_15_3_1");
					put(grammarAccess.getCarAccess().getNameAssignment_2(), "rule__Car__NameAssignment_2");
					put(grammarAccess.getCarAccess().getTimeInAssignment_4_1(), "rule__Car__TimeInAssignment_4_1");
					put(grammarAccess.getCarAccess().getTimeOutAssignment_5_1(), "rule__Car__TimeOutAssignment_5_1");
					put(grammarAccess.getCarAccess().getIsInSegmentAssignment_6_1(), "rule__Car__IsInSegmentAssignment_6_1");
					put(grammarAccess.getSegmentAccess().getNameAssignment_2(), "rule__Segment__NameAssignment_2");
					put(grammarAccess.getSegmentAccess().getNumLanesAssignment_4_1(), "rule__Segment__NumLanesAssignment_4_1");
					put(grammarAccess.getSegmentAccess().getLengthAssignment_5_1(), "rule__Segment__LengthAssignment_5_1");
					put(grammarAccess.getSegmentAccess().getHasCarsAssignment_6_2(), "rule__Segment__HasCarsAssignment_6_2");
					put(grammarAccess.getSegmentAccess().getHasCarsAssignment_6_3_1(), "rule__Segment__HasCarsAssignment_6_3_1");
					put(grammarAccess.getSemaphoreAccess().getNameAssignment_2(), "rule__Semaphore__NameAssignment_2");
					put(grammarAccess.getSemaphoreAccess().getCanGoAssignment_4_1(), "rule__Semaphore__CanGoAssignment_4_1");
					put(grammarAccess.getSemaphoreAccess().getSecondsRedAssignment_5_1(), "rule__Semaphore__SecondsRedAssignment_5_1");
					put(grammarAccess.getSemaphoreAccess().getSecondsGreenAssignment_6_1(), "rule__Semaphore__SecondsGreenAssignment_6_1");
					put(grammarAccess.getSemaphoreAccess().getBelongsToAssignment_8(), "rule__Semaphore__BelongsToAssignment_8");
					put(grammarAccess.getSignal_ImplAccess().getNameAssignment_2(), "rule__Signal_Impl__NameAssignment_2");
					put(grammarAccess.getSignal_ImplAccess().getBelongsToAssignment_5(), "rule__Signal_Impl__BelongsToAssignment_5");
					put(grammarAccess.getExtractorAccess().getNameAssignment_2(), "rule__Extractor__NameAssignment_2");
					put(grammarAccess.getExtractorAccess().getHasStartsAssignment_4_2(), "rule__Extractor__HasStartsAssignment_4_2");
					put(grammarAccess.getExtractorAccess().getHasStartsAssignment_4_3_1(), "rule__Extractor__HasStartsAssignment_4_3_1");
					put(grammarAccess.getExtractorAccess().getHasEndsAssignment_7(), "rule__Extractor__HasEndsAssignment_7");
					put(grammarAccess.getExtractorAccess().getHasEndsAssignment_8_1(), "rule__Extractor__HasEndsAssignment_8_1");
					put(grammarAccess.getExtractorAccess().getSemaphoreAssignment_10_1(), "rule__Extractor__SemaphoreAssignment_10_1");
					put(grammarAccess.getExtractorAccess().getSignalsAssignment_11_2(), "rule__Extractor__SignalsAssignment_11_2");
					put(grammarAccess.getExtractorAccess().getSignalsAssignment_11_3_1(), "rule__Extractor__SignalsAssignment_11_3_1");
					put(grammarAccess.getInjectorAccess().getNameAssignment_2(), "rule__Injector__NameAssignment_2");
					put(grammarAccess.getInjectorAccess().getCarsPerHourAssignment_4_1(), "rule__Injector__CarsPerHourAssignment_4_1");
					put(grammarAccess.getInjectorAccess().getHasStartsAssignment_7(), "rule__Injector__HasStartsAssignment_7");
					put(grammarAccess.getInjectorAccess().getHasStartsAssignment_8_1(), "rule__Injector__HasStartsAssignment_8_1");
					put(grammarAccess.getInjectorAccess().getHasEndsAssignment_10_2(), "rule__Injector__HasEndsAssignment_10_2");
					put(grammarAccess.getInjectorAccess().getHasEndsAssignment_10_3_1(), "rule__Injector__HasEndsAssignment_10_3_1");
					put(grammarAccess.getInjectorAccess().getSemaphoreAssignment_11_1(), "rule__Injector__SemaphoreAssignment_11_1");
					put(grammarAccess.getInjectorAccess().getSignalsAssignment_12_2(), "rule__Injector__SignalsAssignment_12_2");
					put(grammarAccess.getInjectorAccess().getSignalsAssignment_12_3_1(), "rule__Injector__SignalsAssignment_12_3_1");
					put(grammarAccess.getSpeedlimitAccess().getNameAssignment_1(), "rule__Speedlimit__NameAssignment_1");
					put(grammarAccess.getSpeedlimitAccess().getSpeedAssignment_3_1(), "rule__Speedlimit__SpeedAssignment_3_1");
					put(grammarAccess.getSpeedlimitAccess().getBelongsToAssignment_5(), "rule__Speedlimit__BelongsToAssignment_5");
					put(grammarAccess.getStopAccess().getNameAssignment_1(), "rule__Stop__NameAssignment_1");
					put(grammarAccess.getStopAccess().getBelongsToAssignment_4(), "rule__Stop__BelongsToAssignment_4");
					put(grammarAccess.getYieldAccess().getNameAssignment_1(), "rule__Yield__NameAssignment_1");
					put(grammarAccess.getYieldAccess().getBelongsToAssignment_4(), "rule__Yield__BelongsToAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalHighwayParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalHighwayParser) parser;
			typedParser.entryRuleHighway();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public HighwayGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(HighwayGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
